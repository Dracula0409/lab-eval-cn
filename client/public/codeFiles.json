[
  {
    "id": "server",
    "name": "server.c",
    "language": "c",
    "code": "#include <stdio.h>\n#include <netdb.h>\n#include <netinet/in.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/socket.h>\n#include <sys/types.h>\n#include <unistd.h> // read(), write(), close()\n#define MAX 80\n#define PORT 8080\n#define SA struct sockaddr\n\n// Function designed for chat between client and server.\nvoid func(int connfd)\n{\n    char buff[MAX];\n    int n;\n    for (;;) {\n        bzero(buff, MAX);\n        read(connfd, buff, sizeof(buff));\n        printf(\"From client: %s\\t To client : \", buff);\n        bzero(buff, MAX);\n        n = 0;\n        while ((buff[n++] = getchar()) != '\\n');\n        write(connfd, buff, sizeof(buff));\n        if (strncmp(\"exit\", buff, 4) == 0) {\n            printf(\"Server Exit...\\n\");\n            break;\n        }\n    }\n}\n\nint main()\n{\n    int sockfd, connfd, len;\n    struct sockaddr_in servaddr, cli;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        printf(\"socket creation failed...\\n\");\n        exit(0);\n    } else\n        printf(\"Socket successfully created..\\n\");\n    bzero(&servaddr, sizeof(servaddr));\n\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_addr.s_addr = htonl(INADDR_ANY);\n    servaddr.sin_port = htons(PORT);\n\n    if ((bind(sockfd, (SA*)&servaddr, sizeof(servaddr))) != 0) {\n        printf(\"socket bind failed...\\n\");\n        exit(0);\n    } else\n        printf(\"Socket successfully binded..\\n\");\n\n    if ((listen(sockfd, 5)) != 0) {\n        printf(\"Listen failed...\\n\");\n        exit(0);\n    } else\n        printf(\"Server listening..\\n\");\n    len = sizeof(cli);\n\n    connfd = accept(sockfd, (SA*)&cli, &len);\n    if (connfd < 0) {\n        printf(\"server accept failed...\\n\");\n        exit(0);\n    } else\n        printf(\"server accept the client...\\n\");\n\n    func(connfd);\n    close(sockfd);\n}"
  },
  {
    "id": "client",
    "name": "client.c",
    "language": "c",
    "code": "#include <arpa/inet.h> // inet_addr()\n#include <netdb.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <strings.h> // bzero()\n#include <sys/socket.h>\n#include <unistd.h> // read(), write(), close()\n#define MAX 80\n#define PORT 8080\n#define SA struct sockaddr\n\nvoid func(int sockfd)\n{\n    char buff[MAX];\n    int n;\n    for (;;) {\n        bzero(buff, sizeof(buff));\n        printf(\"Enter the string : \");\n        n = 0;\n        while ((buff[n++] = getchar()) != '\\n');\n        write(sockfd, buff, sizeof(buff));\n        bzero(buff, sizeof(buff));\n        read(sockfd, buff, sizeof(buff));\n        printf(\"From Server : %s\", buff);\n        if ((strncmp(buff, \"exit\", 4)) == 0) {\n            printf(\"Client Exit...\\n\");\n            break;\n        }\n    }\n}\n\nint main()\n{\n    int sockfd, connfd;\n    struct sockaddr_in servaddr, cli;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        printf(\"socket creation failed...\\n\");\n        exit(0);\n    } else\n        printf(\"Socket successfully created..\\n\");\n    bzero(&servaddr, sizeof(servaddr));\n\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n    servaddr.sin_port = htons(PORT);\n\n    if (connect(sockfd, (SA*)&servaddr, sizeof(servaddr)) != 0) {\n        printf(\"connection with the server failed...\\n\");\n        exit(0);\n    } else\n        printf(\"connected to the server..\\n\");\n\n    func(sockfd);\n    close(sockfd);\n}"
  }
]
